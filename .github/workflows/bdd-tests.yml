---
name: BDD Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'api/**'
      - '.github/workflows/bdd-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'api/**'
      - '.github/workflows/bdd-tests.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.24'
  MYSQL_VERSION: '8.0'
  MYSQL_DATABASE: 'bocchi_test'
  MYSQL_PORT: '3306'
  CODECOV_FLAGS: 'bdd-tests'
  WORKING_DIR: 'api'
  CGO_ENABLED: '1'

jobs:
  bdd-tests:
    name: BDD Tests with Ginkgo
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - ${{ env.MYSQL_PORT }}:${{ env.MYSQL_PORT }}
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go Test Environment
        uses: ./.github/actions/setup-go-test-env
        with:
          go-version: ${{ env.GO_VERSION }}
          install-ginkgo: 'true'
          working-directory: ${{ env.WORKING_DIR }}
          mysql-root-password: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Run BDD Tests
        working-directory: ${{ env.WORKING_DIR }}
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
        run: |
          make test-bdd-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bdd-test-results-${{ github.run_id }}
          path: |
            ${{ env.WORKING_DIR }}/coverage.out
            ${{ env.WORKING_DIR }}/tests/
          if-no-files-found: ignore

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.WORKING_DIR }}/coverage.out
          flags: ${{ env.CODECOV_FLAGS }}
          name: bdd-coverage
          fail_ci_if_error: true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: bdd-tests
    if: github.event_name == 'pull_request'

    services:
      mysql:
        image: mysql:${{ env.MYSQL_VERSION }}
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ env.MYSQL_DATABASE }}
        ports:
          - ${{ env.MYSQL_PORT }}:${{ env.MYSQL_PORT }}
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go Test Environment
        uses: ./.github/actions/setup-go-test-env
        with:
          go-version: ${{ env.GO_VERSION }}
          install-ginkgo: 'true'
          working-directory: ${{ env.WORKING_DIR }}
          mysql-root-password: ${{ secrets.MYSQL_ROOT_PASSWORD }}

      - name: Run Integration Tests Only
        working-directory: ${{ env.WORKING_DIR }}
        env:
          CGO_ENABLED: ${{ env.CGO_ENABLED }}
        run: |
          go test -tags=integration -v \
            ./tests/integration/... \
            ./interfaces/http/handlers/... \
            2>&1 | tee test_output.log

      - name: Parse test results
        if: always() && github.event_name == 'pull_request'
        id: parse-results
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          if [ -f "test_output.log" ]; then
            # Count test results
            PASSED=$(grep -c "^PASS:" test_output.log || echo "0")
            FAILED=$(grep -c "^FAIL:" test_output.log || echo "0")
            
            # Check for failures
            if grep -q "FAIL\|Test Suite Failed" test_output.log; then
              HAS_FAILURES="true"
            else
              HAS_FAILURES="false"
            fi
            
            # Extract suite names
            SUITES=$(grep "Running Suite:" test_output.log | sed 's/.*Running Suite: \(.*\) -.*/\1/' | tr '\n' ',' | sed 's/,$//')
            
            echo "passed=$PASSED" >> $GITHUB_OUTPUT
            echo "failed=$FAILED" >> $GITHUB_OUTPUT
            echo "has_failures=$HAS_FAILURES" >> $GITHUB_OUTPUT
            echo "suites=$SUITES" >> $GITHUB_OUTPUT
          else
            echo "No test output file found"
            echo "passed=0" >> $GITHUB_OUTPUT
            echo "failed=0" >> $GITHUB_OUTPUT
            echo "has_failures=true" >> $GITHUB_OUTPUT
            echo "suites=Unknown" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with test results
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { passed, failed, has_failures, suites } = ${{ toJson(steps.parse-results.outputs) }};
            
            const status = has_failures === 'true' ? '❌' : '✅';
            const statusText = has_failures === 'true' ? 'failed' : 'passed';
            
            const comment = `## 🧪 BDD Integration Test Results

${status} **Integration tests ${statusText}!**

**Results Summary:**
- ✅ Passed: ${passed}
- ❌ Failed: ${failed}

**Test Suites:** ${suites || 'HTTP Handlers Integration Test Suite'}

**Test Environment:**
- Go Version: ${{ env.GO_VERSION }}
- MySQL Version: ${{ env.MYSQL_VERSION }}
- Framework: Ginkgo v2 with Gomega`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
