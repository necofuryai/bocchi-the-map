---
name: Documentation Sync Check

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, ready_for_review, reopened]
  workflow_dispatch:

jobs:
  doc-sync-check:
    name: Check Documentation Sync
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to compare with base branch

      - name: Get changed files
        id: changed-files
        run: |
          # Get list of changed files including renames and binary files
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-only --diff-filter=ACMR \
            ${{ github.event.pull_request.base.sha }}... \
            ${{ github.event.pull_request.head.sha }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for documentation requirements
        id: doc-check
        run: |
          set -e

          echo "üîç Analyzing changes for documentation requirements..."

          CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          DOC_SUGGESTIONS=""
          CRITICAL_CHANGES=false

          # Check for API changes
          if echo "$CHANGED_FILES" | \
            grep -E "^(api/|migrations/)" > /dev/null; then
            echo "üîß API changes detected"
            DOC_SUGGESTIONS="$DOC_SUGGESTIONS- API changes detected - " \
              "consider updating api/README.md\n"
            CRITICAL_CHANGES=true
          fi

          # Check for frontend changes
          if echo "$CHANGED_FILES" | grep -E "^web/" > /dev/null; then
            echo "üé® Frontend changes detected"
            DOC_SUGGESTIONS="$DOC_SUGGESTIONS- Frontend changes detected - " \
              "consider updating web/README.md\n"
          fi

          # Check for infrastructure changes
          if echo "$CHANGED_FILES" | \
            grep -E "^(infra/.*\.tf|\.github/.*\.(yml|yaml)|.*Dockerfile)" \
            > /dev/null; then
            echo "üöÄ Infrastructure changes detected"
            DOC_SUGGESTIONS="$DOC_SUGGESTIONS- Infrastructure changes detected - " \
              "consider updating infra/README.md\n"
            CRITICAL_CHANGES=true
          fi

          # Check for new features based on commit messages
          COMMITS=$(git log --oneline \
            ${{ github.event.pull_request.base.sha }}.. \
            ${{ github.event.pull_request.head.sha }})
          if echo "$COMMITS" | \
            grep -E "^[a-f0-9]+ (feat|improve):" > /dev/null; then
            echo "‚ú® Feature additions detected"
            DOC_SUGGESTIONS="$DOC_SUGGESTIONS- New features detected - " \
              "consider updating docs/IMPLEMENTATION_LOG.md\n"
            CRITICAL_CHANGES=true
          fi

          # Check if documentation was actually updated
          DOC_UPDATED=false
          if echo "$CHANGED_FILES" | grep -E "\.(md|rst|txt)$" > /dev/null; then
            DOC_UPDATED=true
            echo "üìù Documentation files were updated"
          fi

          # Set outputs
          echo "has_suggestions=$([[ -n \"$DOC_SUGGESTIONS\" ]] && " \
            "echo \"true\" || echo \"false\")" >> $GITHUB_OUTPUT
          echo "suggestions<<EOF" >> $GITHUB_OUTPUT
          echo -e "$DOC_SUGGESTIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "critical_changes=$CRITICAL_CHANGES" >> $GITHUB_OUTPUT
          echo "doc_updated=$DOC_UPDATED" >> $GITHUB_OUTPUT

      - name: Comment on PR with documentation suggestions
        if: steps.doc-check.outputs.has_suggestions == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const suggestions = `${{ steps.doc-check.outputs.suggestions }}`;
            const criticalChanges =
              '${{ steps.doc-check.outputs.critical_changes }}' === 'true';
            const docUpdated =
              '${{ steps.doc-check.outputs.doc_updated }}' === 'true';

            let comment = '## üìö Documentation Sync Check\n\n';

            if (criticalChanges && !docUpdated) {
              comment += '‚ö†Ô∏è **Critical changes detected ' +
                'without documentation updates**\n\n';
            } else if (!docUpdated) {
              comment += 'üí° **Consider updating documentation**\n\n';
            } else {
              comment += '‚úÖ **Documentation updates detected - ' +
                'great job!**\n\n';
            }

            comment += '**Detected changes suggest updating:**\n';
            comment += suggestions;

            if (!docUpdated) {
              comment += '\n**Recommended actions:**\n';
              comment += '- Update relevant README.md files for ' +
                'setup/usage changes\n';
              comment += '- Add milestone to docs/IMPLEMENTATION_LOG.md ' +
                'for significant features\n';
              comment += '- Update CLAUDE.md if AI development ' +
                'guidance changed\n';
              comment += '- Use `docs: update documentation for ' +
                '[feature]` commit type\n';
            }

            comment += '\n**Note:** This is an automated suggestion. ' +
              'Use your judgment on whether documentation updates are needed.\n';

            // Retry function for GitHub API calls with exponential backoff
            const retryApiCall = async (apiCall, maxRetries = 3) => {
              for (let attempt = 1; attempt <= maxRetries; attempt++) {
                try {
                  return await apiCall();
                } catch (error) {
                  console.log(
                    `API call attempt ${attempt} failed:`, error.message
                  );

                  // Check if it's a rate limit error
                  // (status 403 with rate limit message)
                  if (error.status === 403 &&
                      error.message.includes('rate limit')) {
                    const resetTime =
                      error.response?.headers['x-ratelimit-reset'];
                    const waitTime = resetTime ?
                      Math.max(0, (parseInt(resetTime) * 1000) -
                        Date.now()) + 1000 : // Wait until reset + 1s buffer
                      Math.pow(2, attempt) * 1000;
                      // Exponential backoff fallback

                    console.log(
                      `Rate limit exceeded. Waiting ${waitTime}ms ` +
                      `before retry ${attempt}/${maxRetries}`
                    );
                    if (attempt < maxRetries) {
                      await new Promise(resolve =>
                        setTimeout(resolve, waitTime)
                      );
                      continue;
                    }
                  }

                  // For other errors, use exponential backoff
                  if (attempt < maxRetries) {
                    const backoffTime = Math.pow(2, attempt) * 1000;
                    console.log(
                      `Retrying in ${backoffTime}ms ` +
                      `(attempt ${attempt}/${maxRetries})`
                    );
                    await new Promise(resolve =>
                      setTimeout(resolve, backoffTime)
                    );
                    continue;
                  }

                  // Last attempt failed
                  throw error;
                }
              }
            };

            try {
              // Look for existing comment to update instead of
              // creating new ones
              console.log('Fetching existing comments...');
              const { data: comments } = await retryApiCall(() =>
                github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                })
              );

              const existingComment = comments.find(c =>
                c.user.type === 'Bot' &&
                c.body.includes('üìö Documentation Sync Check')
              );

              if (existingComment) {
                console.log(
                  `Updating existing comment ID: ${existingComment.id}`
                );
                await retryApiCall(() =>
                  github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: comment
                  })
                );
                console.log('Successfully updated existing comment');
              } else {
                console.log('Creating new comment...');
                await retryApiCall(() =>
                  github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: comment
                  })
                );
                console.log('Successfully created new comment');
              }
            } catch (error) {
              console.error(
                'Failed to manage PR comment after retries:', error
              );
              // Set step output to indicate failure but don't fail
              // the entire workflow
              core.setOutput('comment_error', error.message);
              core.warning(
                `Unable to post documentation suggestions comment: ` +
                `${error.message}`
              );
            }

      - name: Set check status
        if: >-
          steps.doc-check.outputs.critical_changes == 'true' &&
          steps.doc-check.outputs.doc_updated == 'false'
        run: |
          echo "‚ö†Ô∏è Critical changes detected without documentation updates"
          echo "Consider updating documentation before merging"
          # Don't fail the check, just warn
          exit 0
