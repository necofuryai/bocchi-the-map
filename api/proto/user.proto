syntax = "proto3";

package bocchi.user.v1;

option go_package = "bocchi/api/gen/user/v1;userv1";

import "google/protobuf/timestamp.proto";
import "common.proto";

// User represents a user account
message User {
  string id = 1;
  string email = 2;
  string display_name = 3;
  string avatar_url = 4;
  string auth_provider = 5;
  string auth_provider_id = 6;
  string preferences = 7; // JSON string containing user preferences
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
}

// Request to get a user by ID
message GetUserRequest {
  string id = 1;
}

// Response for getting a user
message GetUserResponse {
  User user = 1;
}

// Request to get a user by email
message GetUserByEmailRequest {
  string email = 1;
}

// Response for getting a user by email
message GetUserByEmailResponse {
  User user = 1;
}

// Request to create a new user
message CreateUserRequest {
  string email = 1;
  string display_name = 2;
  string avatar_url = 3;
  string auth_provider = 4;
  string auth_provider_id = 5;
  string preferences = 6; // JSON string containing user preferences
}

// Response for user creation
message CreateUserResponse {
  User user = 1;
}

// Request to update a user
message UpdateUserRequest {
  string id = 1;
  string display_name = 2;
  string avatar_url = 3;
  string preferences = 4; // JSON string containing user preferences
}

// Response for user update
message UpdateUserResponse {
  User user = 1;
}

// Request to delete a user
message DeleteUserRequest {
  string id = 1;
}

// Response for user deletion
message DeleteUserResponse {
  bool success = 1;
}

// UserService provides gRPC methods for user operations
service UserService {
  // Get a user by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  
  // Get a user by email
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);
  
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  
  // Update an existing user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
  
  // Delete a user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}