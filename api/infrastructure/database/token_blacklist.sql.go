// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: token_blacklist.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const addToBlacklist = `-- name: AddToBlacklist :exec
INSERT INTO token_blacklist (jti, user_id, token_type, expires_at, reason)
VALUES (?, ?, ?, ?, ?)
`

type AddToBlacklistParams struct {
	Jti       string                  `json:"jti"`
	UserID    string                  `json:"user_id"`
	TokenType TokenBlacklistTokenType `json:"token_type"`
	ExpiresAt time.Time               `json:"expires_at"`
	Reason    sql.NullString          `json:"reason"`
}

func (q *Queries) AddToBlacklist(ctx context.Context, arg AddToBlacklistParams) error {
	_, err := q.db.ExecContext(ctx, addToBlacklist,
		arg.Jti,
		arg.UserID,
		arg.TokenType,
		arg.ExpiresAt,
		arg.Reason,
	)
	return err
}

const blacklistAccessToken = `-- name: BlacklistAccessToken :exec
INSERT INTO token_blacklist (jti, user_id, token_type, expires_at, reason)
VALUES (?, ?, 'access', ?, 'logout')
`

type BlacklistAccessTokenParams struct {
	Jti       string    `json:"jti"`
	UserID    string    `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) BlacklistAccessToken(ctx context.Context, arg BlacklistAccessTokenParams) error {
	_, err := q.db.ExecContext(ctx, blacklistAccessToken, arg.Jti, arg.UserID, arg.ExpiresAt)
	return err
}

const blacklistRefreshToken = `-- name: BlacklistRefreshToken :exec
INSERT INTO token_blacklist (jti, user_id, token_type, expires_at, reason)
VALUES (?, ?, 'refresh', ?, 'logout')
`

type BlacklistRefreshTokenParams struct {
	Jti       string    `json:"jti"`
	UserID    string    `json:"user_id"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) BlacklistRefreshToken(ctx context.Context, arg BlacklistRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, blacklistRefreshToken, arg.Jti, arg.UserID, arg.ExpiresAt)
	return err
}

const cleanupExpiredTokens = `-- name: CleanupExpiredTokens :exec
DELETE FROM token_blacklist 
WHERE expires_at < NOW() - INTERVAL 24 HOUR
LIMIT 1000
`

func (q *Queries) CleanupExpiredTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cleanupExpiredTokens)
	return err
}

const isTokenBlacklisted = `-- name: IsTokenBlacklisted :one
SELECT COUNT(*) > 0 AS is_blacklisted FROM token_blacklist 
WHERE jti = ? AND expires_at > NOW()
`

func (q *Queries) IsTokenBlacklisted(ctx context.Context, jti string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isTokenBlacklisted, jti)
	var is_blacklisted bool
	err := row.Scan(&is_blacklisted)
	return is_blacklisted, err
}
