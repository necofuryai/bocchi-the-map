// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
    id, email, display_name, avatar_url, auth_provider, auth_provider_id, preferences
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	ID             string            `json:"id"`
	Email          string            `json:"email"`
	DisplayName    string            `json:"display_name"`
	AvatarUrl      sql.NullString    `json:"avatar_url"`
	AuthProvider   UsersAuthProvider `json:"auth_provider"`
	AuthProviderID string            `json:"auth_provider_id"`
	Preferences    json.RawMessage   `json:"preferences"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.AuthProvider,
		arg.AuthProviderID,
		arg.Preferences,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, display_name, avatar_url, auth_provider, auth_provider_id, preferences, created_at, updated_at FROM users 
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, display_name, avatar_url, auth_provider, auth_provider_id, preferences, created_at, updated_at FROM users 
WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByProviderID = `-- name: GetUserByProviderID :one
SELECT id, email, display_name, avatar_url, auth_provider, auth_provider_id, preferences, created_at, updated_at FROM users 
WHERE auth_provider = ? AND auth_provider_id = ?
`

type GetUserByProviderIDParams struct {
	AuthProvider   UsersAuthProvider `json:"auth_provider"`
	AuthProviderID string            `json:"auth_provider_id"`
}

func (q *Queries) GetUserByProviderID(ctx context.Context, arg GetUserByProviderIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByProviderID, arg.AuthProvider, arg.AuthProviderID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.AvatarUrl,
		&i.AuthProvider,
		&i.AuthProviderID,
		&i.Preferences,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users 
SET avatar_url = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserAvatarParams struct {
	AvatarUrl sql.NullString `json:"avatar_url"`
	ID        string         `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.AvatarUrl, arg.ID)
	return err
}

const updateUserPreferences = `-- name: UpdateUserPreferences :exec
UPDATE users 
SET preferences = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPreferencesParams struct {
	Preferences json.RawMessage `json:"preferences"`
	ID          string          `json:"id"`
}

func (q *Queries) UpdateUserPreferences(ctx context.Context, arg UpdateUserPreferencesParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPreferences, arg.Preferences, arg.ID)
	return err
}

const upsertUser = `-- name: UpsertUser :exec
INSERT INTO users (
    id, email, display_name, avatar_url, auth_provider, auth_provider_id, preferences
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) ON DUPLICATE KEY UPDATE
    email = VALUES(email),
    display_name = VALUES(display_name),
    avatar_url = VALUES(avatar_url),
    preferences = VALUES(preferences),
    updated_at = CURRENT_TIMESTAMP
`

type UpsertUserParams struct {
	ID             string            `json:"id"`
	Email          string            `json:"email"`
	DisplayName    string            `json:"display_name"`
	AvatarUrl      sql.NullString    `json:"avatar_url"`
	AuthProvider   UsersAuthProvider `json:"auth_provider"`
	AuthProviderID string            `json:"auth_provider_id"`
	Preferences    json.RawMessage   `json:"preferences"`
}

func (q *Queries) UpsertUser(ctx context.Context, arg UpsertUserParams) error {
	_, err := q.db.ExecContext(ctx, upsertUser,
		arg.ID,
		arg.Email,
		arg.DisplayName,
		arg.AvatarUrl,
		arg.AuthProvider,
		arg.AuthProviderID,
		arg.Preferences,
	)
	return err
}
