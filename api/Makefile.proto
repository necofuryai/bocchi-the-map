# Protocol Buffers generation commands
.PHONY: proto-gen proto-clean proto-check

# Generate Go code from proto files
proto-gen:
	@echo "Generating Go code from proto files..."
	@mkdir -p gen
	@PATH=$(PATH):$(shell go env GOPATH)/bin protoc \
		--proto_path=proto \
		--go_out=gen \
		--go_opt=paths=source_relative \
		--go-grpc_out=gen \
		--go-grpc_opt=paths=source_relative \
		proto/common.proto
	@PATH=$(PATH):$(shell go env GOPATH)/bin protoc \
		--proto_path=proto \
		--go_out=gen \
		--go_opt=paths=source_relative \
		--go-grpc_out=gen \
		--go-grpc_opt=paths=source_relative \
		proto/review.proto
	@PATH=$(PATH):$(shell go env GOPATH)/bin protoc \
		--proto_path=proto \
		--go_out=gen \
		--go_opt=paths=source_relative \
		--go-grpc_out=gen \
		--go-grpc_opt=paths=source_relative \
		proto/spot.proto
	@PATH=$(PATH):$(shell go env GOPATH)/bin protoc \
		--proto_path=proto \
		--go_out=gen \
		--go_opt=paths=source_relative \
		--go-grpc_out=gen \
		--go-grpc_opt=paths=source_relative \
		proto/user.proto
	@echo "Proto generation completed!"

# Clean generated files
proto-clean:
	@echo "Cleaning generated proto files..."
	@rm -rf gen/
	@echo "Clean completed!"

# Check proto tools installation
proto-check:
	@echo "Checking proto tools..."
	@which protoc || (echo "protoc not found. Install with: brew install protobuf" && exit 1)
	@ls $(shell go env GOPATH)/bin/protoc-gen-go || (echo "protoc-gen-go not found. Install with: go install google.golang.org/protobuf/cmd/protoc-gen-go@latest" && exit 1)
	@ls $(shell go env GOPATH)/bin/protoc-gen-go-grpc || (echo "protoc-gen-go-grpc not found. Install with: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest" && exit 1)
	@echo "All proto tools are installed!"